package com.fidelidad.models {
    class Cliente {
        - id: String
        - nombre: String
        - correo: String
        - puntos: int
        - nivel: Nivel
        - streakDias: int
        + getId(): String
        + getNombre(): String
        + getCorreo(): String
        + getPuntos(): int
        + getNivel(): Nivel
        + getStreakDias(): int
        + setPuntos(p: int): void
        + setNivel(n: Nivel): void
        + setStreakDias(s: int): void
    }

    class Compra {
        - idCompra: String
        - idCliente: String
        - monto: double
        - fecha: LocalDate
        + getIdCompra(): String
        + getIdCliente(): String
        + getMonto(): double
        + getFecha(): LocalDate
    }

    enum Nivel {
        BRONCE
        PLATA
        ORO
        PLATINO
    }
}

package com.fidelidad.repositories {
    class ClienteRepository {
        - clientes: Map<String, Cliente>
        + agregar(cliente: Cliente): void
        + obtener(id: String): Cliente
        + listar(): List<Cliente>
        + actualizar(cliente: Cliente): void
        + eliminar(id: String): void
    }

    class CompraRepository {
        - compras: List<Compra>
        + agregar(compra: Compra): void
        + listar(): List<Compra>
        + obtenerPorCliente(idCliente: String): List<Compra>
    }
}

package com.fidelidad.services {
    class FidelidadService {
        + calcularPuntosBase(monto: double): int
        + obtenerMultiplicador(nivel: Nivel): double
        + calcularNivel(puntos: int): Nivel
        + calcularBonus(comprasDelDia: List<Compra>): int
        + procesarCompra(cliente: Cliente, compra: Compra, comprasDelDia: List<Compra>): void
    }
}

ClienteRepository --> Cliente
CompraRepository --> Compra
FidelidadService --> Cliente
FidelidadService --> Compra
FidelidadService --> Nivel
@enduml